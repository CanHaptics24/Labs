/* autogenerated by Processing revision 1293 on 2024-02-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import co.haply.hphysics.*;
import org.jbox2d.collision.*;
import org.jbox2d.collision.shapes.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.*;
import org.jbox2d.dynamics.contacts.*;
import org.jbox2d.dynamics.controllers.*;
import org.jbox2d.dynamics.joints.*;
import org.jbox2d.pooling.*;
import org.jbox2d.pooling.arrays.*;
import org.jbox2d.pooling.stacks.*;
import org.jbox2d.util.blob.*;
import org.jbox2d.util.nonconvex.*;
import org.jbox2d.util.sph.*;

import processing.serial.*;
import static java.util.concurrent.TimeUnit.*;
import java.util.concurrent.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.Timer;
import java.awt.event.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class sketch_6_Maze_Physics extends PApplet {

/**
 **********************************************************************************************************************
 * @file       Maze.pde
 * @author     Elie Hymowitz, Steve Ding, Colin Gallacher
 * @version    V4.0.0
 * @date       08-January-2021
 * @brief      Maze game example using 2-D physics engine
 **********************************************************************************************************************
 * @attention
 *
 *
 **********************************************************************************************************************
 */



/* library imports *****************************************************************************************************/ 



/* end library imports *************************************************************************************************/  









/* scheduler definition ************************************************************************************************/ 
private final ScheduledExecutorService scheduler      = Executors.newScheduledThreadPool(1);
/* end scheduler definition ********************************************************************************************/ 



/* device block definitions ********************************************************************************************/
Board             haplyBoard;
Device            widgetOne;
Mechanisms        pantograph;

byte              widgetOneID                         = 5;
int               CW                                  = 0;
int               CCW                                 = 1;
boolean           renderingForce                     = false;
/* end device block definition *****************************************************************************************/



/* framerate definition ************************************************************************************************/
long              baseFrameRate                       = 120;
/* end framerate definition ********************************************************************************************/ 



/* elements definition *************************************************************************************************/

/* Screen and world setup parameters */
float             pixelsPerCentimeter                 = 40.0f;

/* generic data for a 2DOF device */
/* joint space */
PVector           angles                              = new PVector(0, 0);
PVector           torques                             = new PVector(0, 0);

/* task space */
PVector           posEE                               = new PVector(0, 0);
PVector           fEE                                 = new PVector(0, 0); 

/* World boundaries */
FWorld            world;
float             worldWidth                          = 25.0f;  
float             worldHeight                         = 10.0f; 

float             edgeTopLeftX                        = 0.0f; 
float             edgeTopLeftY                        = 0.0f; 
float             edgeBottomRightX                    = worldWidth; 
float             edgeBottomRightY                    = worldHeight;

float             gravityAcceleration                 = 980; //cm/s2
/* Initialization of virtual tool */
HVirtualCoupling  s;

/* define maze blocks */
FBox              b1;
FBox              b2;
FBox              b3;
FBox              b4;
FBox              b5;
FBox              l1;
ArrayList<FBody> maze;
ArrayList<FBody> enemies;

/* define start and stop button */
FCircle           c1;
FCircle           c2;

/* define game ball */
FCircle           g2;
FBox              g1;

/* define game start */
boolean           gameStart                           = false;

/* text font */
PFont             f;
int mazeImageWidth;
int mazeImageHeight;
Timer timer = null;
/* end elements definition *********************************************************************************************/  

public void read_maze(){
  try {
            // Path to maze definition
            String filePath = "C:\\Users\\naomi\\Documents\\GIT\\ETS\\CanHaptics\\Lab01\\sketch_6_Maze_Physics\\maze\\hello_maze.maze";
            
            //maze = new FBox[230][230];
            maze = new ArrayList<FBody>();
            enemies = new ArrayList<FBody>();

            // Read the image
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            
            String line = reader.readLine();
            int row = 0;
            while (line != null) {
              System.out.println(line);
              
              for(int col = 0; col < line.length(); col++){
                if(line.charAt(col) == '1'){
                  FBox box = new FBox(1, 1);                  
                  box.setPosition(edgeTopLeftX+col, edgeTopLeftY+row); 
                  box.setFill(0);
                  box.setNoStroke();
                  box.setStaticBody(true);
                  maze.add(box);
                  world.add(box);
                }
                else if(line.charAt(col) == 'h' || line.charAt(col) == 'v' || line.charAt(col) == 'H' || line.charAt(col) == 'V'){
                  FCircle enemy = new FCircle(1);
                  enemy.setPosition(edgeTopLeftX+col, edgeTopLeftY+row); 
                  enemy.setName(String. valueOf(line.charAt(col)));
                  enemy.setDensity(80);
                  enemy.setFill(random(255),random(255),random(255));
                  enemy.setStaticBody(true);
                  enemies.add(enemy);
                  world.add(enemy);
                }
                else if (line.charAt(col) == 's'){
                  c1 = new FCircle(2.0f); // diameter is 2
                  //c1.setPosition(edgeTopLeftX+2.5, edgeTopLeftY+worldHeight/2.0-3);
                  c1.setPosition(edgeTopLeftX+col, edgeTopLeftY+row); 
                  c1.setFill(0, 255, 0);
                  c1.setStaticBody(true);
                  c1.setName("StartButton");
                  world.add(c1);
                }
                else if(line.charAt(col) == 'f'){
                  c2 = new FCircle(2.0f);
                  //c2.setPosition(worldWidth-2.5, edgeTopLeftY+worldHeight/2.0);
                  c2.setPosition(edgeTopLeftX+col, edgeTopLeftY+row); 
                  c2.setFill(200,0,0);
                  c2.setStaticBody(true);
                  c2.setSensor(true);
                  c1.setName("FinishButton");
                  world.add(c2);
                }
              }
              row++;
              line = reader.readLine();
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
}

/* setup section *******************************************************************************************************/
public void setup(){
  /* put setup code here, run once: */
  //read_image();
  System.out.println(mazeImageWidth);
  System.out.println(mazeImageHeight);
  /* screen size definition */
  /* size commented out by preprocessor */;
  //size((int)(mazeImageWidth) * 10, (int)(mazeImageHeight) * 10);
  
  /* set font type and size */
  f                   = createFont("Arial", 16, true);

  
  /* device setup */
  
  /**  
   * The board declaration needs to be changed depending on which USB serial port the Haply board is connected.
   * In the base example, a connection is setup to the first detected serial device, this parameter can be changed
   * to explicitly state the serial port will look like the following for different OS:
   *
   *      windows:      haplyBoard = new Board(this, "COM10", 0);
   *      linux:        haplyBoard = new Board(this, "/dev/ttyUSB0", 0);
   *      mac:          haplyBoard = new Board(this, "/dev/cu.usbmodem1411", 0);
   */
  haplyBoard          = new Board(this, Serial.list()[0], 0);
  widgetOne           = new Device(widgetOneID, haplyBoard);
  pantograph          = new Pantograph();
  
  widgetOne.set_mechanism(pantograph);

  widgetOne.add_actuator(1, CCW, 2);
  widgetOne.add_actuator(2, CCW, 1);

  widgetOne.add_encoder(1, CCW, 168, 4880, 2);
  widgetOne.add_encoder(2, CCW, 12, 4880, 1);
  
  
  widgetOne.device_set_parameters();
  
  
  /* 2D physics scaling and world creation */
  hAPI_Fisica.init(this); 
  hAPI_Fisica.setScale(pixelsPerCentimeter); 
  world               = new FWorld();
  
  read_maze();

  /*b1                  = new FBox(0.1, 5.0);
  b1.setPosition(edgeTopLeftX+worldWidth/4.0-2, edgeTopLeftY+worldHeight/2+1.5); 
  b1.setFill(0);
  b1.setNoStroke();
  b1.setStaticBody(true);
  world.add(b1);
  
  b2                  = new FBox(1.0, 5.0);
  b2.setPosition(edgeTopLeftX+worldWidth/4.0, edgeTopLeftY+worldHeight/2-1.5); 
  b2.setFill(0);
  b2.setNoStroke();
  b2.setStaticBody(true);
  world.add(b2);
   
  b3                  = new FBox(0.5, 3.0);
  b3.setPosition(edgeTopLeftX+worldWidth/4.0+8, edgeTopLeftY+worldHeight/2+1.5); 
  b3.setFill(0);
  b3.setNoStroke();
  b3.setStaticBody(true);
  world.add(b3);
  
  b4                  = new FBox(1.0, 5.0);
  b4.setPosition(edgeTopLeftX+worldWidth/4.0+12, edgeTopLeftY+worldHeight/2-1.5); 
  b4.setFill(0);
  b4.setNoStroke();
  b4.setStaticBody(true);
  world.add(b4);
   
  b5                  = new FBox(3.0, 2.0);
  b5.setPosition(edgeTopLeftX+worldWidth/2.0, edgeTopLeftY+worldHeight/2.0+2);
  b5.setFill(0);
  b5.setNoStroke();
  b5.setStaticBody(true);
  world.add(b5);*/
  
  /* Set viscous layer */
 /* l1                  = new FBox(27,4);
  l1.setPosition(24.5/2,8.5);
  l1.setFill(150,150,255,80);
  l1.setDensity(100);
  l1.setSensor(true);
  l1.setNoStroke();
  l1.setStatic(true);
  l1.setName("Water");
  world.add(l1);*/
  
  /* Start Button */
  
  
  /* Finish Button */
  
  
  /* Game Box */
 /* g1                  = new FBox(1, 1);
  g1.setPosition(2, 4);
  //g1.setDensity(80);
  g1.setFill(random(255),random(255),random(255));
  g1.setName("Widget");
  world.add(g1);*/
  
  /* Game Ball */
  /*g2                  = new FCircle(1);
  g2.setPosition(3, 4);
  g2.setDensity(80);
  g2.setFill(random(255),random(255),random(255));
  g2.setName("Widget");
  g2.setStaticBody(true);
  world.add(g2);*/
  
  /* Setup the Virtual Coupling Contact Rendering Technique */
  s                   = new HVirtualCoupling((0.75f)); 
  s.h_avatar.setDensity(4); 
  s.h_avatar.setFill(255,0,0); 
  s.h_avatar.setSensor(true);

  s.init(world, edgeTopLeftX+worldWidth/2, edgeTopLeftY+2); 
  
  /* World conditions setup */
  world.setGravity((0.0f), gravityAcceleration); //1000 cm/(s^2)
  //world.setEdges((edgeTopLeftX), (edgeTopLeftY), (edgeBottomRightX), (edgeBottomRightY)); 
  //world.setEdgesRestitution(.4);
  //world.setEdgesFriction(0.5);
  

 
  world.draw();
  
  
  /* setup framerate speed */
  frameRate(baseFrameRate);
  
  
  /* setup simulation thread to run at 1kHz */
  SimulationThread st = new SimulationThread();
  scheduler.scheduleAtFixedRate(st, 1, 1, MILLISECONDS);
}
/* end setup section ***************************************************************************************************/



/* draw section ********************************************************************************************************/
public void draw(){
  /* put graphical code here, runs repeatedly at defined framerate in setup, else default at 60fps: */
  if(renderingForce == false){
    background(255);
    textFont(f, 22);
 
    if(gameStart){
      fill(0, 0, 0);
      textAlign(CENTER);
      text("Push the ball or square to the red circle", width/2, 60);
      textAlign(CENTER);
      text("Touch the green circle to reset", width/2, 90);
    
      //b1.setFill(0, 0, 0);
      /*b2.setFill(0, 0, 0);
      b3.setFill(0, 0, 0);
      b4.setFill(0, 0, 0);
      b5.setFill(0, 0, 0);*/
      
    
    }
    else{
      fill(128, 128, 128);
      textAlign(CENTER);
      text("Touch the green circle to start the maze", width/2, 60);
    
      //b1.setFill(255, 255, 255);
     /* b2.setFill(255, 255, 255);
      b3.setFill(255, 255, 255);
      b4.setFill(255, 255, 255);
      b5.setFill(255, 255, 255);*/
    }
  
    world.draw();
  }
}
/* end draw section ****************************************************************************************************/

int direction = 1;
int animation_steps = 0;
int MAX_ENEMY_STEPS = 6;
public void animate(){
  //g2.adjustPosition(0.5, 0);
  for (FBody enemy : enemies){
    if(enemy.getName().equals("h")){
      enemy.adjustPosition(direction * 0.5f, 0);
    }
    else if(enemy.getName().equals("H")) { 
      enemy.adjustPosition(-direction * 0.5f, 0);
    }
    else if(enemy.getName().equals("v")) { 
      enemy.adjustPosition(0, direction * 0.5f);
    }
    else if(enemy.getName().equals("V")) { 
      enemy.adjustPosition(0, -direction * 0.5f);
    }
  }
  if(animation_steps >= MAX_ENEMY_STEPS){
    animation_steps = 0;
    direction *= -1;
  }
  animation_steps++;
}


int previousFrame = 0;
int currentFrame = 0;

/* simulation section **************************************************************************************************/
class SimulationThread implements Runnable{
  
  public void run(){
    /* put haptic simulation code here, runs repeatedly at 1kHz as defined in setup */
    
    renderingForce = true;
    
    if(haplyBoard.data_available()){
      /* GET END-EFFECTOR STATE (TASK SPACE) */
      widgetOne.device_read_data();
    
      angles.set(widgetOne.get_device_angles()); 
      posEE.set(widgetOne.get_device_position(angles.array()));
      posEE.set(posEE.copy().mult(200));  
    }
    
    s.setToolPosition(edgeTopLeftX+worldWidth/2-(posEE).x, edgeTopLeftY+(posEE).y-7); 
    s.updateCouplingForce();
 
 
    fEE.set(-s.getVirtualCouplingForceX(), s.getVirtualCouplingForceY());
    fEE.div(100000); //dynes to newtons
    
    torques.set(widgetOne.set_device_torques(fEE.array()));
    widgetOne.device_write_torques();
    
    if (s.h_avatar.isTouchingBody(c1)){
      gameStart = true;
      //g1.setPosition(2,8);
      //g2.setPosition(3,8);
      s.h_avatar.setSensor(false);
    }
  
    /*if(g1.isTouchingBody(c2) || g2.isTouchingBody(c2)){
      gameStart = false;
      s.h_avatar.setSensor(true);
    }*/
  
    currentFrame++;
    if(currentFrame - previousFrame > 1000){
      previousFrame = currentFrame;      
      animate();
    }
    
  
     //Viscous layer codes 
    /*if (s.h_avatar.isTouchingBody(l1)){
      s.h_avatar.setDamping(400);
    }
    else{
      s.h_avatar.setDamping(10); 
    }
  
    if(gameStart && g1.isTouchingBody(l1)){
      g1.setDamping(20);
    }
  
    if(gameStart && g2.isTouchingBody(l1)){
      g2.setDamping(20);
    }
    */
    world.step(1.0f/1000.0f);
  
    renderingForce = false;
  }
}
/* end simulation section **********************************************************************************************/


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "sketch_6_Maze_Physics" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
