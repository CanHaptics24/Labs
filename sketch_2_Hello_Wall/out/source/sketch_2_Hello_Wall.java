/* autogenerated by Processing revision 1293 on 2024-02-04 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.serial.*;
import static java.util.concurrent.TimeUnit.*;
import java.util.concurrent.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class sketch_2_Hello_Wall extends PApplet {

/**
 **********************************************************************************************************************
 * @file       sketch_2_Hello_Wall.pde
 * @author     Steve Ding, Colin Gallacher
 * @version    V3.0.0
 * @date       08-January-2021
 * @brief      Wall haptic example with programmed physics for a haptic wall 
 **********************************************************************************************************************
 * @attention
 *
 *
 **********************************************************************************************************************
 */
 
  /* library imports *****************************************************************************************************/ 



/* end library imports *************************************************************************************************/  


/* scheduler definition ************************************************************************************************/ 
private final ScheduledExecutorService scheduler      = Executors.newScheduledThreadPool(1);
/* end scheduler definition ********************************************************************************************/ 



/* device block definitions ********************************************************************************************/
Board             haplyBoard;
Device            widgetOne;
Mechanisms        pantograph;

byte              widgetOneID                         = 5;
int               CW                                  = 0;
int               CCW                                 = 1;
boolean           renderingForce                     = false;
/* end device block definition *****************************************************************************************/



/* framerate definition ************************************************************************************************/
long              baseFrameRate                       = 120;
/* end framerate definition ********************************************************************************************/ 



/* elements definition *************************************************************************************************/

/* Screen and world setup parameters */
float             pixelsPerMeter                      = 4000.0f;
float             radsPerDegree                       = 0.01745f;

/* pantagraph link parameters in meters */
float             l                                   = 0.07f;
float             L                                   = 0.09f;


/* end effector radius in meters */
float             rEE                                 = 0.003f;

/* virtual wall parameter  */
float             kWall                               = 450;
PVector           fWall                               = new PVector(0, 0);
PVector           penWall                             = new PVector(0, 0);
PVector           posWall                             = new PVector(0.01f, 0.08f);



/* generic data for a 2DOF device */
/* joint space */
PVector           angles                              = new PVector(0, 0);
PVector           torques                             = new PVector(0, 0);

/* task space */
PVector           posEE                               = new PVector(0, 0);
PVector           fEE                                 = new PVector(0, 0); 

/* device graphical position */
PVector           deviceOrigin                        = new PVector(0, 0); //affects only y when started

/* World boundaries reference */
final int         worldPixelWidth                     = 1000;
final int         worldPixelHeight                    = 650;


/* graphical elements */
PShape /*pGraph, joint,*/ endEffector, startButton;
PShape wall;
/* end elements definition *********************************************************************************************/ 


/* setup section *******************************************************************************************************/
public void setup(){
  /* put setup code here, run once: */
  
  /* screen size definition */
  /* size commented out by preprocessor */;
  
  /* device setup */
  haplyBoard          = new Board(this, Serial.list()[0], 0);
  widgetOne           = new Device(widgetOneID, haplyBoard);
  pantograph          = new Pantograph();
  
  widgetOne.set_mechanism(pantograph);
  
  widgetOne.add_actuator(1, CCW, 2);
  widgetOne.add_actuator(2, CCW, 1);

  widgetOne.add_encoder(1, CCW, 168, 4880, 2);
  widgetOne.add_encoder(2, CCW, 12, 4880, 1);
  
  widgetOne.device_set_parameters();
    
  
  /* visual elements setup */
  background(0);
  deviceOrigin.add(worldPixelWidth/2, 0);
  
  /* create pantagraph graphics */
  create_end_effector();
  
  /* creat start button */
  create_start_button();

  /* create wall graphics */
  wall = create_wall(posWall.x-0.2f, posWall.y+rEE, posWall.x+0.2f, posWall.y+rEE);
  wall.setStroke(color(0));
    
  /* setup framerate speed */
  frameRate(baseFrameRate);
  
  
  /* setup simulation thread to run at 1kHz */ 
  SimulationThread st = new SimulationThread();
  scheduler.scheduleAtFixedRate(st, 1, 1, MILLISECONDS);
}
/* end setup section ***************************************************************************************************/



/* draw section ********************************************************************************************************/
public void draw(){
  /* put graphical code here, runs repeatedly at defined framerate in setup, else default at 60fps: */
  if(renderingForce == false){
    background(0); 
    update_animation(angles.x*radsPerDegree, angles.y*radsPerDegree, posEE.x, posEE.y);
  }
}
/* end draw section ****************************************************************************************************/



/* simulation section **************************************************************************************************/
class SimulationThread implements Runnable{
  
  public void run(){
    /* put haptic simulation code here, runs repeatedly at 1kHz as defined in setup */
    
    renderingForce = true;
    
    if(haplyBoard.data_available()){
      /* GET END-EFFECTOR STATE (TASK SPACE) */
      widgetOne.device_read_data();
    
      angles.set(widgetOne.get_device_angles()); 
      posEE.set(widgetOne.get_device_position(angles.array()));
      posEE.set(device_to_graphics(posEE)); 
      
      
      /* haptic wall force calculation */
      fWall.set(0, 0);
      float delta = posWall.y - (posEE.y + rEE);
     // penWall.set(0, (posWall.y - (posEE.y + rEE)));
      
      if(delta < 0){
        //fWall = fWall.add(penWall.mult(-kWall));  //kWall is stiffness
        fWall.set(0, delta * kWall);
      }
      
      fEE.set(graphics_to_device(fWall.copy()));
      /* end haptic wall force calculation */
    }
    
    
    torques.set(widgetOne.set_device_torques(fEE.array()));
    widgetOne.device_write_torques();
  
  
    renderingForce = false;
  }
}
/* end simulation section **********************************************************************************************/


/* helper functions section, place helper functions here ***************************************************************/
public void create_end_effector(){
  //float lAni = pixelsPerMeter * l;
  //float LAni = pixelsPerMeter * L;
  float rEEAni = pixelsPerMeter * rEE;
  
  /*pGraph = createShape();
  pGraph.beginShape();
  pGraph.fill(255);
  pGraph.stroke(0);
  pGraph.strokeWeight(2);*/
  
  //pGraph.vertex(deviceOrigin.x, deviceOrigin.y);
  //pGraph.vertex(deviceOrigin.x, deviceOrigin.y);
  //pGraph.vertex(deviceOrigin.x, deviceOrigin.y);
  //pGraph.vertex(deviceOrigin.x, deviceOrigin.y);
  //pGraph.endShape(CLOSE);
  
  //joint = createShape(ELLIPSE, deviceOrigin.x, deviceOrigin.y, rEEAni, rEEAni);
  //joint.setStroke(color(0));
  
  //endEffector = createShape(ELLIPSE, deviceOrigin.x, deviceOrigin.y, 2*rEEAni, 2*rEEAni);
  strokeWeight(1);
  endEffector = createShape(ELLIPSE, deviceOrigin.x, 0, 2*rEEAni, 2*rEEAni);
  //endEffector = createShape(ELLIPSE, 0.01, -300, 2*rEEAni, 2*rEEAni);
  endEffector.setStroke(color(0));
  //strokeWeight(5);
  
}

public void create_start_button(){
  float button_radius = pixelsPerMeter * 0.01f;
  strokeWeight(1);
  startButton = createShape(ELLIPSE, 50, 50, 2*button_radius, 2*button_radius);
  startButton.fill(color(255,0,0));
} 

public PShape create_wall(float x1, float y1, float x2, float y2){
  x1 = pixelsPerMeter * x1;
  y1 = pixelsPerMeter * y1;
  x2 = pixelsPerMeter * x2;
  y2 = pixelsPerMeter * y2;
  
  strokeWeight(5);
  return createShape(LINE, deviceOrigin.x + x1, deviceOrigin.y + y1, deviceOrigin.x + x2, deviceOrigin.y+y2);
}


public void update_animation(float th1, float th2, float xE, float yE){
  background(255);
  
  float lAni = pixelsPerMeter * l;
  float LAni = pixelsPerMeter * L;
  
  xE = pixelsPerMeter * xE;
  yE = pixelsPerMeter * yE;
  
  th1 = 3.14f - th1;
  th2 = 3.14f - th2;
  
  //pGraph.setVertex(1, deviceOrigin.x + lAni*cos(th1), deviceOrigin.y + lAni*sin(th1));
  //pGraph.setVertex(3, deviceOrigin.x + lAni*cos(th2), deviceOrigin.y + lAni*sin(th2));
  //pGraph.setVertex(2, deviceOrigin.x + xE, deviceOrigin.y + yE);
  
  //shape(pGraph);
  //shape(joint);
  shape(wall);
  shape(startButton);
  
  
  translate(xE, yE);
  shape(endEffector);
}


public PVector device_to_graphics(PVector deviceFrame){
  return deviceFrame.set(-deviceFrame.x, deviceFrame.y);
}


public PVector graphics_to_device(PVector graphicsFrame){
  return graphicsFrame.set(-graphicsFrame.x, graphicsFrame.y);
}



/* end helper functions section ****************************************************************************************/




 


  public void settings() { size(1000, 650); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "sketch_2_Hello_Wall" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
